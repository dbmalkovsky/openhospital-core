package org.isf.hl7.service;

import java.util.Map;

import org.isf.generaldata.HL7Parameters;
import org.isf.hl7.handler.OHReceiverApplication;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import ca.uhn.hl7v2.DefaultHapiContext;
import ca.uhn.hl7v2.HL7Exception;
import ca.uhn.hl7v2.HapiContext;
import ca.uhn.hl7v2.app.Connection;
import ca.uhn.hl7v2.app.ConnectionListener;
import ca.uhn.hl7v2.app.HL7Service;
import ca.uhn.hl7v2.app.Initiator;
import ca.uhn.hl7v2.model.Message;
import ca.uhn.hl7v2.parser.Parser;
import ca.uhn.hl7v2.protocol.ReceivingApplication;
import ca.uhn.hl7v2.protocol.ReceivingApplicationExceptionHandler;

public class HL7SendReceive implements Runnable {

	private static final Logger LOGGER = LoggerFactory.getLogger(HL7SendReceive.class);

	private static HapiContext context = new DefaultHapiContext();
	private boolean running = true;

	public HL7SendReceive() {
		LOGGER.info("HL7 started...");
		HL7Parameters.initialize();
	}

	@Override
	public void run() {
		try {
			HL7Service hl7Service = context.newServer(HL7Parameters.PORT, HL7Parameters.TLS);
			hl7Service.registerConnectionListener(new OHConnectionListener());
			hl7Service.setExceptionHandler(new OHExceptionHandler());

			ReceivingApplication<Message> handler = new OHReceiverApplication();
			hl7Service.registerApplication("*", "*", handler);

			// Start the server listening for messages
			hl7Service.startAndWait();

			while (running) {
				LOGGER.info("HL7 service running...");
				// Create a message to send
				String msg = "MSH|^~\\&|HIS|RIH|EKG|EKG|199904140038||ADT^A01|12345|P|2.2\r"
						+ "PID|0001|00009874|00001122|A00977|SMITH^JOHN^M|MOM|19581119|F|NOTREAL^LINDA^M|C|564 SPRING ST^^NEEDHAM^MA^02494^US|0002|(818)565-1551|(425)828-3344|E|S|C|0000444444|252-00-4414||||SA|||SA||||NONE|V1|0001|I|D.ER^50A^M110^01|ER|P00055|11B^M011^02|070615^BATMAN^GEORGE^L|555888^NOTREAL^BOB^K^DR^MD|777889^NOTREAL^SAM^T^DR^MD^PHD|ER|D.WT^1A^M010^01|||ER|AMB|02|070615^NOTREAL^BILL^L|ER|000001916994|D||||||||||||||||GDD|WA|NORM|02|O|02|E.IN^02D^M090^01|E.IN^01D^M080^01|199904072124|199904101200|199904101200||||5555112333|||666097^NOTREAL^MANNY^P\r"
						+ "NK1|0222555|NOTREAL^JAMES^R|FA|STREET^OTHER STREET^CITY^ST^55566|(222)111-3333|(888)999-0000|||||||ORGANIZATION\r"
						+ "PV1|0001|I|D.ER^1F^M950^01|ER|P000998|11B^M011^02|070615^BATMAN^GEORGE^L|555888^OKNEL^BOB^K^DR^MD|777889^NOTREAL^SAM^T^DR^MD^PHD|ER|D.WT^1A^M010^01|||ER|AMB|02|070615^VOICE^BILL^L|ER|000001916994|D||||||||||||||||GDD|WA|NORM|02|O|02|E.IN^02D^M090^01|E.IN^01D^M080^01|199904072124|199904101200|||||5555112333|||666097^DNOTREAL^MANNY^P\r"
						+ "PV2|||0112^TESTING|55555^PATIENT IS NORMAL|NONE|||19990225|19990226|1|1|TESTING|555888^NOTREAL^BOB^K^DR^MD||||||||||PROD^003^099|02|ER||NONE|19990225|19990223|19990316|NONE\r"
						+ "AL1||SEV|001^POLLEN\r"
						+ "GT1||0222PL|NOTREAL^BOB^B||STREET^OTHER STREET^CITY^ST^77787|(444)999-3333|(222)777-5555||||MO|111-33-5555||||NOTREAL GILL N|STREET^OTHER STREET^CITY^ST^99999|(111)222-3333\r"
						+ "IN1||022254P|4558PD|BLUE CROSS|STREET^OTHER STREET^CITY^ST^00990||(333)333-6666||221K|LENIX|||19980515|19990515|||PATIENT01 TEST D||||||||||||||||||02LL|022LP554";
				Parser p = context.getPipeParser();
				Message adt = p.parse(msg);

				// A connection object represents a socket attached to an HL7 server
				Connection connection = context.newClient(HL7Parameters.DOMAIN, HL7Parameters.PORT, HL7Parameters.TLS);

				// The initiator is used to transmit unsolicited messages
				Initiator initiator = connection.getInitiator();
				Message response = initiator.sendAndReceive(adt);

				String responseString = p.encode(response);
				System.out.println("Received response:\n" + responseString);

				/*
				 * MSH|^~\&|||||20070218200627.515-0500||ACK|54|P|2.2 MSA|AA|12345
				 */
				connection.close();
				break;
			}
			hl7Service.stopAndWait();
		} catch (Exception exception) {
			LOGGER.error("HL7 initialization error", exception);
		}
	}

	/**
	 * Exception handler which is notified any time
	 */
	public static class OHExceptionHandler implements ReceivingApplicationExceptionHandler {

		/**
		 * Process an exception.
		 *
		 * @param theIncomingMessage the incoming message. This is the raw message which was
		 * received from the external system
		 * @param theIncomingMetadata Any metadata that accompanies the incoming message. See {@link ca.uhn.hl7v2.protocol.Transportable#getMetadata()}
		 * @param theOutgoingMessage the outgoing message. The response NAK message generated by
		 * HAPI.
		 * @param theException the exception which was received
		 * @return The new outgoing message. This can be set to the value provided
		 * by HAPI in <code>outgoingMessage</code>, or may be replaced with
		 * another message. <b>This method may not return <code>null</code></b>.
		 */
		public String processException(String theIncomingMessage, Map<String, Object> theIncomingMetadata, String theOutgoingMessage, Exception theException)
				throws HL7Exception {
			/*
			 * Here you can do any processing you like. If you want to change the response (NAK) message which will be returned you may do
			 * so, or just return the NAK which HAPI already created (theOutgoingMessage)
			 */
			return theOutgoingMessage;
		}
	}

	class OHConnectionListener implements ConnectionListener {

		@Override
		public void connectionDiscarded(Connection connectionBeingDiscarded) {
			System.out.println("Connection discarded event fired " + connectionBeingDiscarded.getRemoteAddress());
			System.out.println("For Remote Address: " + connectionBeingDiscarded.getRemoteAddress());
			System.out.println("For Remote Port: " + connectionBeingDiscarded.getRemotePort());
		}

		@Override
		public void connectionReceived(Connection connectionBeingOpened) {
			System.out.println("Connection opened event fired " + connectionBeingOpened.getRemoteAddress());
			System.out.println("From Remote Address: " + connectionBeingOpened.getRemoteAddress());
			System.out.println("From Remote Port: " + connectionBeingOpened.getRemotePort());
		}

	}
}
